"""
Django settings for cet project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# 加载 .env 文件中的环境变量
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*il-h$$9=73a(2g5g_edot=!#$je=r@ey7(ov0s1uyitc@@o9m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['47.121.137.60', 'app7508.acapp.acwing.com.cn', '127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'trips',  # ⭐ 旅行应用（原cetapp）
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Django REST Framework
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'django_filters',
    'drf_spectacular',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS中间件（必须在CommonMiddleware之前）
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CSRF配置 - 仅用于 Django Admin 和表单
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://localhost:8080',
    'http://127.0.0.1:8080',
]
CSRF_COOKIE_SECURE = False  # 开发环境设为 False
CSRF_COOKIE_SAMESITE = 'Lax'

ROOT_URLCONF = 'roamio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'roamio.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 4,
        }
    }
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 中文简体

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# settings.py 添加
LOGIN_REDIRECT_URL = '/cetapp/trip1/'

# 文件上传设置 - 支持大文件上传
FILE_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024  # 250MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024  # 250MB
FILE_UPLOAD_TEMP_DIR = None  # 使用系统临时目录

# 大文件上传设置
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# 请求体大小限制
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240
DATA_UPLOAD_MAX_NUMBER_FILES = 100

# ==================== Django REST Framework配置 ====================
from datetime import timedelta

REST_FRAMEWORK = {
    # 认证 - 统一使用 JWT
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 移除 SessionAuthentication - 完全使用 JWT，避免 CSRF 问题
    ],
    # 权限
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    # 分页
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    # 过滤、搜索、排序
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    # API文档
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    # 日期时间格式
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    # 异常处理
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
}

# JWT配置
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),        # access token有效期1天
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),       # refresh token有效期7天
    'ROTATE_REFRESH_TOKENS': True,                     # 刷新token时返回新的refresh token
    'BLACKLIST_AFTER_ROTATION': True,                  # 旧token加入黑名单
    'UPDATE_LAST_LOGIN': True,                         # 更新最后登录时间
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# API文档配置
SPECTACULAR_SETTINGS = {
    'TITLE': 'CET旅行平台 API',
    'DESCRIPTION': '前后端分离的旅行分享平台',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
}

# ==================== CORS跨域配置 ====================
# 允许所有来源（生产环境）
CORS_ALLOW_ALL_ORIGINS = True

# 更安全的配置（如果需要限制特定域名）
CORS_ALLOWED_ORIGINS = [
    "https://app7508.acapp.acwing.com.cn",
    "http://47.121.137.60",
]

# 允许的请求方法
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS'
]

# 允许的请求头
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# 安全头部（微信需要）
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

# CORS相关配置
CORS_ALLOW_CREDENTIALS = True  # 允许携带Cookie

# ==================== 邮件配置 ====================
# 是否使用真实邮件发送（如果USE_REAL_EMAIL=1，即使是开发环境也会真实发送邮件）
USE_REAL_EMAIL = os.getenv('USE_REAL_EMAIL', '0') == '1'

# 开发环境默认使用控制台后端（验证码会打印到控制台）
# 如果设置了 USE_REAL_EMAIL=1，则使用真实SMTP发送
# 生产环境始终使用SMTP后端
if DEBUG and not USE_REAL_EMAIL:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("=" * 50)
    print("[DEV] 开发环境：邮件将输出到控制台")
    print("[提示] 要发送真实邮件，请设置环境变量: USE_REAL_EMAIL=1")
    print("=" * 50)
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.exmail.qq.com')  # 腾讯企业邮箱SMTP
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
    EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False') == 'True'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')  # 从环境变量读取
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')  # 从环境变量读取
    if USE_REAL_EMAIL and DEBUG:
        print("=" * 50)
        print("[DEV] 使用真实SMTP发送邮件")
        if not EMAIL_HOST_USER or not EMAIL_HOST_PASSWORD:
            print("[警告] EMAIL_HOST_USER 或 EMAIL_HOST_PASSWORD 未配置，邮件发送可能失败")
        print("=" * 50)

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'Roamio <noreply@roamio.com>')

# 邮件模板目录
EMAIL_TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates', 'emails')

# ==================== QQ OAuth 配置 ====================
QQ_APP_ID = os.getenv('QQ_APP_ID', '102813859')
QQ_APP_KEY = os.getenv('QQ_APP_KEY', 'OddPvLYXHo69wTYO')
QQ_REDIRECT_URI = os.getenv('QQ_REDIRECT_URI', 'https://app7508.acapp.acwing.com.cn/settings/qq/receive_code')
QQ_AUTHORIZE_URL = 'https://graph.qq.com/oauth2.0/authorize'
QQ_ACCESS_TOKEN_URL = 'https://graph.qq.com/oauth2.0/token'
QQ_GET_USER_INFO_URL = 'https://graph.qq.com/oauth2.0/me'
QQ_GET_USER_DETAIL_URL = 'https://graph.qq.com/user/get_user_info'
